module.exports = (shoppingcart ,knex,isverify)=>{
    function generateUniqueId(){
        var characters = "abcdefghijklmnopqrstuvwxyz0123456789";
        var uniqueId = '';
        var charactersLength = characters.length;
        for ( var i = 0; i < 11; i++ ) {
          uniqueId += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return uniqueId;
      };   
    
    shoppingcart.get("/generateUniqueId",(req,res)=>{
        uniqueId = generateUniqueId();
        knex.select("cart_id").from("shopping_cart")
        .where("cart_id",uniqueId)
        .then((cart)=>{
            if(cart.length){
                res.send("This cart_id is alreay exists")
            }else{
                console.log(cart)
                res.send(uniqueId)
            }
        })
    })


    shoppingcart.post("/add",isverify,(customerData,req,res,next)=>{
        /*//Example for request body
      `{  "cart_id": "< customer cart id generated by above get method >",
          "product_id" : 1,
          "attributes" : "S",
          "quantity" : 2  }` */
        var shoppingCart = req.body
        
        if((shoppingCart.cart_id&&shoppingCart.product_id&&shoppingCart.attributes&&shoppingCart.quantity)!==undefined && shoppingcart!=={}){
            knex.select("cart_id").from("shopping_cart")
            .then((cart)=>{
                // console.log(cart)
                if((cart[0]==undefined && cart.length==0 )|| cart[0].cart_id==shoppingCart.cart_id){
                    shoppingCart["added_on"]=new Date
                    
                    knex("shopping_cart").insert(shoppingCart)
                    .then(()=>{
                        knex.select(
                            'item_id',
                            'product.name',
                            'attributes',
                            'product.product_id',
                            'product.image',
                            'product.price',
                            'quantity'
                          ).from('shopping_cart').join('product','shopping_cart.product_id','=','product.product_id')
                           .where('cart_id',req.body.cart_id)
                           .then((my_cart)=>{
                                // console.log(my_cart)
                                for(let product of my_cart){
                                    product["subtotal"]=Number(product.price)*Number(product.quantity)
                                }
                                res.send(my_cart)
                            }).catch((err)=>{
                                res.send(err)
                            })
                    }).catch((err)=>{
                        res.send(err)
                    })
                }else{

                    res.send({message:"Your cart_id is wrong!",cart_id:`This is your cart_id < ${cart[0].cart_id} >` })
                }
            })
        }else{
            res.send({message:"Please fill all the details"})
        }
    })


    shoppingcart.get("/:cart_id",isverify,(customerData,req,res,next)=>{
        knex.select(
            'item_id',
            'product.name',
            'attributes',
            'product.product_id',
            'product.image',
            'product.price',
            'quantity'
        ).from("shopping_cart").join("product","shopping_cart.product_id","=","product.product_id")
        .where("cart_id",req.params.cart_id)
        .then((my_cart)=>{
            if(my_cart.length){
                for(let cart of my_cart){
                    cart["subtotal"]=Number(cart.price)*Number(cart.quantity)
                }res.send(my_cart)
            }else{
                res.send({message:"Your cart is empty"})
            }
        })
    })


    shoppingcart.put("/update/:item_id",isverify,(customerData,req,res,next)=>{

        /*/Example for request body
            {"attributes" : "L",
            "quantity" : 2 }  */
        var shoppingCart = req.body
        knex("shopping_cart").where("item_id",req.params.item_id)
        .update(shoppingCart)
        .then(()=>{knex.select(
                'item_id',
                'product.name',
                'attributes',
                'product.product_id',
                'product.image',
                'product.price',
                'quantity'
            ).from('shopping_cart').join('product','shopping_cart.product_id','=','product.product_id')
            .where("item_id",req.params.item_id)
            .then((my_cart)=>{
                for(let cart of my_cart){
                    cart["subtotal"]=Number(cart.price)*Number(cart.quantity)
                }res.send(my_cart)
            }).catch((err)=>{
                res.send(err)
            })
        }).catch((err)=>{
            res.send(err)
        })
       
    })


    shoppingcart.delete("/empty/:cart_id",isverify,(customerData,req,res,next)=>{
        knex("shopping_cart").where("cart_id",req.params.cart_id)
        .del()
        .then((emptyCart)=>{
            console.log(emptyCart)
            res.send({message:"cart deleted successfully"})
        }).catch((err)=>{
            res.send(err)
        })
    })

    shoppingcart.get("/saveForLater/:item_id",isverify,(customerData,req,res,next)=>{
        
        knex("shopping_cart").where("item_id",req.params.item_id)
        .then((my_cart)=>{
            if(my_cart.length){
                my_cart = my_cart[0]
                knex("save_cart").insert(my_cart)
                .then(()=>{
                    knex("shopping_cart").where("item_id",req.params.item_id)
                    .del()
                    .then((emptyCart)=>{
                        res.send({message:"this product is saved for later"})
                    })
                }).catch((err)=>{
                    res.send(err)
                })
            }else{
                knex("shopping_cart").truncate()
                res.send({message:"Your Cart Is Empty"})
            }    
        }).catch((err)=>{
            res.send(err)
        })
    })


    shoppingcart.get("/moveToCart/:item_id",isverify,(customerData,req,res,next)=>{
        knex("save_cart").where("item_id",req.params.item_id)
        .then((my_cart)=>{
            if(my_cart.length){
                my_cart = my_cart[0]
                knex("shopping_cart").insert(my_cart)
                .then(()=>{
                    knex("save_cart").where("item_id",req.params.item_id)
                    .del()
                    .then((emptyCart)=>{
                        res.send({message:"this product is moved to cart"})
                    })
                }).catch((err)=>{
                    res.send(err)
                })
            }else{
                knex("save_cart").truncate()
                res.send({message:"No product saved"})
            }
            
        }).catch((err)=>{
            res.send(err)
        })
    })


    shoppingcart.get("/getSaved/:cart_id",isverify,(customerData,req,res,next)=>{
        
        knex.select("item_id","name","attributes","price")
        .from("save_cart").join("product","save_cart.product_id","=","product.product_id")
        .then((savedCart)=>{
            // console.log("afds")
            if(savedCart.length){
                res.send(savedCart)
            }else{
                res.send("No Saved Product")
            }
        }).catch((err)=>{
            res.send(err)
        })
    })


    shoppingcart.get("/totalAmount/:cart_id",isverify,(customerData,req,res,next)=>{
        knex.select("price","quantity").from("product")
        .join("shopping_cart","product.product_id","=","shopping_cart.product_id")
        .where("cart_id",req.params.cart_id)
        .then((productsList)=>{
            var total = 0
            for(let product of productsList){
                total += Number(product.price)*Number(product.quantity)
            }res.send({total_Amount:total})
        }).catch((err)=>{
            res.send(err)
        })
    })


    shoppingcart.delete("/removeProduct/:item_id",isverify,(customerData,req,res,next)=>{
        knex("shopping_cart").where("item_id",req.params.item_id)
        .del()
        .then((emptyItem)=>{
            if(emptyItem.length){
                res.send({message:"Item deleted successfully"})
            }else{
                res.send({message:"Item not found"})
            }
        }).catch((err)=>{
            res.send(err)
        })
    })
}